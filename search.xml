<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ECDSA</title>
      <link href="/2020/02/05/ECDSA/"/>
      <url>/2020/02/05/ECDSA/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>数字签名算法（DSA）在联邦信息处理标准FIPS中有详细论述，称为数字签名标准。它的安全性基于素域上的离散对数问题。椭圆曲线密码（ECC）由Neal Koblitz和Victor Miller于1985年发明。它可以看作是椭圆曲线对先前基于离散对数问题（DLP）的密码系统的模拟，只是群元素由素域中的元素数换为有限域上的椭圆曲线上的点。椭圆曲线密码体制的安全性基于椭圆曲线离散对数问题（ECDLP）的难解性。椭圆曲线离散对数问题远难于离散对数问题，椭圆曲线密码系统的单位比特强度要远高于传统的离散对数系统。因此在使用较短的密钥的情况下，ECC可以达到于DL系统相同的安全级别。这带来的好处就是计算参数更小，密钥更短，运算速度更快，签名也更加短小。因此椭圆曲线密码尤其适用于处理能力、存储空间、带宽及功耗受限的场合。</p><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>ECDSA是ECC与DSA的结合，整个签名过程与DSA类似，所不一样的是签名中采取的算法为ECC，最后签名出来的值也是分为r,s。</p><h2 id="椭圆曲线的参数"><a href="#椭圆曲线的参数" class="headerlink" title="椭圆曲线的参数"></a>椭圆曲线的参数</h2><p>椭圆曲线算法是工作在循环子群上的，因此需要如下几个参数：</p><ul><li>素数p，这个值定义了有限域的大小</li><li>椭圆曲线的系数a、b</li><li>基点G，也称生成元</li><li>子群的阶n</li><li>cofactor h (h = N/n)</li></ul><h2 id="KeyGen"><a href="#KeyGen" class="headerlink" title="KeyGen"></a>KeyGen</h2><ul><li>G为椭圆曲线上的点，q是由G所组成的有限循环群的阶</li><li>选取随机数x，x属于[1,q-1]</li><li>计算Q=xG</li><li>私钥为：x，公钥为：Q</li></ul><hr><h2 id="Sign对消息m签名"><a href="#Sign对消息m签名" class="headerlink" title="Sign对消息m签名"></a>Sign对消息m签名</h2><ul><li>选取随机数k，k属于[1,q-1]</li><li>计算R=kG=(Rx,Ry)以及r=Rx mod q</li><li>计算s=k^-1(H(m)+rx) mod q，若r=0或s=0，则另选随机数k，重新执行上面的过程</li><li>消息m的签名为(r,s)</li></ul><hr><h2 id="Verif"><a href="#Verif" class="headerlink" title="Verif"></a>Verif</h2><ul><li>计算u=s^-1H(m) mod q, v=rs^-1 mod q</li><li>计算(x1,y1)=uG+vQ，r1=x1 mod q</li><li>判断r和r1的关系，如果r=r1，则签名有效，否则签名无效</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>不太会用Markdown的公式，所以先凑活写一下，以后会用了，再更新！</p><h2 id="ECDSA在Bitcoin中的应用"><a href="#ECDSA在Bitcoin中的应用" class="headerlink" title="ECDSA在Bitcoin中的应用"></a>ECDSA在Bitcoin中的应用</h2><p>主要应用于，transaction的签名，签名存放在解锁脚本的ScriptSig中，所以在签名中存在两个字段r，s。下面我们来具体分析下今天我看的东西。</p><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><ul><li>选取一个随机数d，计算Publickey=dG</li><li>e=hash(message)</li><li>选取一个随机数k</li><li>(x,y)=kG，r=x</li><li>s=(e+rd)/k<br>sig:(r,s)</li></ul><hr><p>看着似乎没有什么问题，但是我们如果使用同一个随机数k，即k1=k2</p><ul><li>(x1,y1)=k1G</li><li>(x2,y2)=k2G</li></ul><hr><h2 id="因为k1-k2，所以x1-x2，y1-y2，所以r1-r2"><a href="#因为k1-k2，所以x1-x2，y1-y2，所以r1-r2" class="headerlink" title="因为k1=k2，所以x1=x2，y1=y2，所以r1=r2"></a>因为k1=k2，所以x1=x2，y1=y2，所以r1=r2</h2><ul><li>sig1:[r,(e1+rd)/k]</li><li>sig2:[r,(e2+rd)/k]</li><li>s1=(e1+rd)/k，s2=(e2+rd)/k</li><li>两个等式左右同时相减得到：s1-s2=(e1-e2)/k，即：k=(e1-e2)/(s1-s2)</li><li>得到k之后就可以计算：d=(s1k-e1)/r</li></ul><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>综上所述，即可以得到私钥d，所以如果同一用户下的交易签名r字段相等，就可以得到私钥，进而造成账户金额被盗等重大问题，索尼以前就犯过这样的错误：PlayStation 3 只能运行被索尼的进行ECDSA签名的游戏。如果我想为PlayStation 3开发了一个新的游戏，除非我从索尼获得签名值，否则我及时发布了，也运行不了这个游戏。问题是，索尼签名时用了一个静态的k值而不是随机生成的。所以k的保密性非常重要，且random number也保证其唯一性。</p>]]></content>
      
      
      <categories>
          
          <category> Bitcoin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECDSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zcash区块数据结构解析</title>
      <link href="/2020/02/04/Zcash%E5%8C%BA%E5%9D%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/02/04/Zcash%E5%8C%BA%E5%9D%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Zcash（ZEC）由Zooko Wilcox-O’Hearn于2016年推出，基于Zerocoin协议，Zcash（ZEC）是一种去中心化，开放源代码，以隐私为重点的加密货币，可实现交易的选择性透明化。Zcash交易可以是透明的，也可以通过称为zk-SNARKs的零知识证明来屏蔽。这允许网络维护余额的安全分类帐，而无需透露各方或涉及的金额。代替发布支出授权和交易值，对交易元数据进行加密，并使用zk-SNARK证明没有人是不诚实的。</p><a id="more"></a><h2 id="Zcash区块的结构"><a href="#Zcash区块的结构" class="headerlink" title="Zcash区块的结构"></a>Zcash区块的结构</h2><h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p><img src="/images/Zcash_block.png" alt="Zcash_block"></p><h3 id="Block-Header"><a href="#Block-Header" class="headerlink" title="Block Header"></a>Block Header</h3><ul><li>nVersion：版本号。</li><li>hashPrevBlock：前一个区块的哈希值。</li><li>hashMerkleRoot：内部字节顺序的SHA-256d哈希。 merkle根源自此块中包含的所有事务的哈希值，从而确保在不修改header的情况下不能修改这些事务。</li><li>hashReserved /hashFinalSaplingRoot：</li><li>nTime：时间戳，旷工打包区块的时间。</li><li>nBits：工作量证明的难度目标。</li><li>nNonce：随机数，用于工作量证明，矿工可以更改其任意字段以修改标头哈希，以产生小于或等于目标阈值的哈希。</li><li>solutionSize：Equihash解决方案的大小（以字节为单位）。</li><li>solution：Equihash解决方案</li></ul><h3 id="transactions"><a href="#transactions" class="headerlink" title="transactions"></a>transactions</h3><ul><li>header：(version&gt;=1)</li><li>nVersionGroupId：版本组ID(version&gt;=3)</li><li>tx_in_count：此交易的输入数量(version&gt;=1)</li><li>tx_in：交易输入（与bitcoin类似）(version&gt;=1)</li><li>tx_out_count：此交易的输出数量(version&gt;=1)</li><li>tx_out：交易输出（与bitcoin类似）(version&gt;=1)</li><li>lock_time：锁定交易的时间(version&gt;=1)</li><li>nExpiryHeight：块高度在{1 .. 499999999}范围内，之后交易将到期，或者为0以禁用到期时间(version&gt;=3)</li><li>valueBalance：sapling花费的值减去output的值（对Zcash的交易过程不懂，所以不太懂这个的定义）(version&gt;=4)</li><li>nShieldedSpend：</li><li>vShieldedSpend：</li><li>nShieldedOutput：</li><li>vShieldedOutput：</li><li>nJoinSplit：</li><li>vJoinSplit：</li><li>vJoinSplit：</li><li>joinSplitPubKey：JoinSplitSig公共验证密钥的编码(version&gt;=2)</li><li>joinSplitSig：对整个TransacTion数据使用私钥进行的签名(version&gt;=2)</li><li>bindingSig：是整个Transaction数据的签名(verson&gt;=4)</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>今天一开始想学习的是XRP（瑞波币），了解了一番，大体知道它的优点：</p><ul><li>打包一个区块的时间仅需几秒钟，而比特币需要10分钟</li><li>交易记录的确认方式更加快速，所有节点一起确认，仅仅需要3至5秒钟，而比特币是一个节点一个节点的确认，速度大大降低，需要40至50分钟<br>此外还了解到，XRP是一个去中心化、覆盖全货币币种的互联网金融交易系统，它的网关是资金进出如波系统的进出口，人们可以通过这个中介将各类货币注入或者抽离瑞波系统，它的货币供应量是1000亿。<br>本来是想先把它的区块结构图画出来的，结果寻找半天无果，我也想过通过分析源码找出结构代码，但是能力有限，好在Zcash有一篇白皮书让我找到了，这才得到了区块结构，慢慢深入了解Zcash的交易过程吧，进而完善blog！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zcash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ETH区块数据结构解析</title>
      <link href="/2020/02/01/ETH%E5%8C%BA%E5%9D%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/02/01/ETH%E5%8C%BA%E5%9D%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="区块的源码"><a href="#区块的源码" class="headerlink" title="区块的源码"></a>区块的源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Block represents an entire block in the Ethereum blockchain.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">type Block <span class="class"><span class="keyword">struct</span> &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    header       *Header</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    uncles       []*Header</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    transactions Transactions</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// caches</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    hash atomic.Value</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">size</span> atomic.Value</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Td is used by package core to store the total difficulty</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// of the chain up to and including the block.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    td *big.Int</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// These fields are used by package eth to track</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// inter-peer block relay.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    ReceivedAt   time.Time</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    ReceivedFrom interface&#123;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><a id="more"></a><ul><li>header：区块头，包含该区块的信息</li><li>uncles：该区块所包含的叔块的信息</li><li>transactions：该区块包含的交易信息</li><li>td：总难度，即从开始区块到本区块（包括本区块）所有的难度的累加</li><li>ReceivedAt：用于跟踪区块的生成  </li><li>ReceivedFrom：用于跟踪区块的生成</li></ul><h2 id="结构图："><a href="#结构图：" class="headerlink" title="结构图："></a>结构图：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">type Header <span class="class"><span class="keyword">struct</span> &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    ParentHash  common.Hash    `json:<span class="string">"parentHash"</span>       gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    UncleHash   common.Hash    `json:<span class="string">"sha3Uncles"</span>       gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    Coinbase    common.Address `json:<span class="string">"miner"</span>            gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    Root        common.Hash    `json:<span class="string">"stateRoot"</span>        gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    TxHash      common.Hash    `json:<span class="string">"transactionsRoot"</span> gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    ReceiptHash common.Hash    `json:<span class="string">"receiptsRoot"</span>     gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    Bloom       Bloom          `json:<span class="string">"logsBloom"</span>        gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    Difficulty  *big.Int       `json:<span class="string">"difficulty"</span>       gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    Number      *big.Int       `json:<span class="string">"number"</span>           gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    GasLimit    uint64         `json:<span class="string">"gasLimit"</span>         gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    GasUsed     uint64         `json:<span class="string">"gasUsed"</span>          gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    Time        *big.Int       `json:<span class="string">"timestamp"</span>        gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    Extra       []<span class="keyword">byte</span>         `json:<span class="string">"extraData"</span>        gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    MixDigest   common.Hash    `json:<span class="string">"mixHash"</span>          gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    Nonce       BlockNonce     `json:<span class="string">"nonce"</span>            gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">type Body <span class="class"><span class="keyword">struct</span> &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    Transactions []*Transaction</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    Uncles       []*Header</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><img src="/images/ETH_block.png" alt="ETH_block"></p><h3 id="各部分代表的含义"><a href="#各部分代表的含义" class="headerlink" title="各部分代表的含义"></a>各部分代表的含义</h3><ul><li>ParentHash：父区块的哈希值</li><li>UncleHash：上面提到的uncles的RLP哈希值，uncles是一个Header数组</li><li>Coinbase：挖出该区块矿工的地址，矿工费和挖出区块的奖励会发放到该地址</li><li>Root：存储账户状态的Merkle树的根节点的哈希</li><li>TxHash：存储该区块中交易的Merkle树的根节点的哈希</li><li>ReceiptHash：存储该区块的交易的回单的Merkle树的根节点的哈希，Block的所有Transaction执行完后会生成一个Receipt数组</li><li>Bloom：交易日志的布隆过滤器，用于查询</li><li>Difficulty：区块的难度</li><li>Number：区块高度</li><li>Time：挖出该区块的时间戳</li><li>GasLimit：区块内所有Gas消耗的上限</li><li>GasUsed：执行区块内所有Transaction实际消耗的Gas总和</li><li>Nonce：一个64bit的哈希数，用于工作量证明</li><li>mixDigest：该哈希值与Nonce值一起证明该区块上已经进行了足够的计算，用于证明挖矿成功</li><li>Extra：预留备用</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以太坊各个方面我也不太清楚，只能靠着自己了解的写一下，transaction的结构图没有给出，慢慢来吧，等我了解清楚再更新！</p><h2 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//core/types/transaction.go</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">type Transaction <span class="class"><span class="keyword">struct</span> &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    data txdata</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// caches</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    hash atomic.Value</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">size</span> atomic.Value</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    from atomic.Value</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">type txdata <span class="class"><span class="keyword">struct</span> &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    AccountNonce uint64          `json:<span class="string">"nonce"</span>    gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    Price        *big.Int        `json:<span class="string">"gasPrice"</span> gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    GasLimit     uint64          `json:<span class="string">"gas"</span>      gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    Recipient    *common.Address `json:<span class="string">"to"</span>       rlp:<span class="string">"nil"</span>` <span class="comment">// nil means contract creation</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    Amount       *big.Int        `json:<span class="string">"value"</span>    gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    Payload      []<span class="keyword">byte</span>          `json:<span class="string">"input"</span>    gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Signature values</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    V *big.Int `json:<span class="string">"v"</span> gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    R *big.Int `json:<span class="string">"r"</span> gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    S *big.Int `json:<span class="string">"s"</span> gencodec:<span class="string">"required"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// This is only used when marshaling to JSON.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    Hash *common.Hash `json:<span class="string">"hash"</span> rlp:<span class="string">"-"</span>`</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><img src="/images/ETH_transaction.png" alt="ETH_transaction"></p><h3 id="trsansaction及txdata中各个部分的含义"><a href="#trsansaction及txdata中各个部分的含义" class="headerlink" title="trsansaction及txdata中各个部分的含义"></a>trsansaction及txdata中各个部分的含义</h3><h4 id="transaction"><a href="#transaction" class="headerlink" title="transaction"></a>transaction</h4><ul><li>data 它的格式是txdata，是交易所包含的数据txdata中详细讲</li><li>hash、size、from是缓存</li></ul><h4 id="txdata"><a href="#txdata" class="headerlink" title="txdata"></a>txdata</h4><ul><li>AccountNonce：此交易的发送者已发送过的交易数</li><li>Price：此交易的 gas price</li><li>GasLimit：本交易允许消耗的最大 gas 数量</li><li>Recipient：交易的接收者地址</li><li>Amount：交易转移的以太币数量，单位是 wei</li><li>Payload：交易可以携带的数据，在不同类型的交易中有不同的含义</li><li>V R S：交易的签名数据</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我感觉ETH的整个交易过程好复杂，没有静下心来好好研究下，有很多东西也是一窍不通，通过以上的总结，以太坊的区块结构大体解析的差不多了，还有很多东西值得研究，比如它使用的树的结构：Merkle-PatriciaTrie，以后再细细品味吧！</p>]]></content>
      
      
      <categories>
          
          <category> 区块结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ETH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo next主题中添加播放器Aplayer</title>
      <link href="/2020/01/31/Hexo%20next%E4%B8%BB%E9%A2%98%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%92%AD%E6%94%BE%E5%99%A8Aplayer/"/>
      <url>/2020/01/31/Hexo%20next%E4%B8%BB%E9%A2%98%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%92%AD%E6%94%BE%E5%99%A8Aplayer/</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>首先，先下载Aplayer源码：<a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">APlayer</a></li></ul><h2 id="dist文件夹"><a href="#dist文件夹" class="headerlink" title="dist文件夹"></a>dist文件夹</h2><ul><li>再将文件中的dist文件夹复制到路径：<code>blog/themes/next/source</code>（我的next版本是7.5）<a id="more"></a></li></ul><h2 id="新建music-js"><a href="#新建music-js" class="headerlink" title="新建music.js"></a>新建music.js</h2><ul><li>在目录<code>blog/themes/next/source/dist</code>下添加music.js文件<br>内容是：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> APlayer(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    container: document.getElementById('aplayer'),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    fixed: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    autoplay: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    audio: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        name: '勇气',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        artist: '棉子',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        url: 'http://music.163.com/song/media/outer/url?id=1411358329.mp3',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        cover: '/images/5.jpg',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        name: <span class="string">"星星"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        artist: '张杰',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        url: 'http://music.163.com/song/media/outer/url?id=1399004693.mp3',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        cover: '/images/xingxing.jpg',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        name: '这就是爱吗',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        artist: '十豆',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        url: 'http://music.163.com/song/media/outer/url?id=1412242872.mp3',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        cover: '/images/zjsam.jpg',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        name: 'Alone',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        artist: 'Alan Walker / Noonie Bao',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        url: 'http://music.163.com/song/media/outer/url?id=444269135.mp3',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        cover: '/images/alone.jpg',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        name: 'Umbrella (Matte Remix)',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        artist: 'Matte / Ember Island',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        url: 'http://music.163.com/song/media/outer/url?id=164209623.mp3',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        cover: '/images/1.jpg',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        name: '大眠 (完整版)原唱：王心凌',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        artist: '小乐哥',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        url: 'http://music.163.com/song/media/outer/url?id=3778678.mp3',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        cover: '/images/2.jpg',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        name: '世间美好与你环环相扣',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        artist: '柏松',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        url: 'http://music.163.com/song/media/outer/url?id=1363948882.mp3',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">        cover: '/images/3.jpg',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">        name: <span class="string">'飞'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">        artist: '王恩信Est / 二胖u',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">        url: 'http://music.163.com/song/media/outer/url?id=1386259535.mp3',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">        cover: '/images/4.jpg',</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><hr><p>注：里面的代码可以修改，歌曲信息需要手动添加：</p><ul><li>name：歌曲名称</li><li>artist：作者</li><li>url：连接（具体怎样操作看下面步骤）</li><li>cover：是图片连接，可以是本地图片，也可以是在线图片，本地放在<code>source/images</code>然后修改路径即可</li></ul><hr><h2 id="url添加歌曲方法"><a href="#url添加歌曲方法" class="headerlink" title="url添加歌曲方法"></a>url添加歌曲方法</h2><ul><li>网易云网页播放一首歌曲</li><li>将网址中的id复制例：<code>https://music.163.com/#/song?id=1411358329</code></li><li>将下面代码中的id修改为你想添加歌曲的id：<code>http://music.163.com/song/media/outer/url?id=.mp3</code></li></ul><h2 id="修改文件-layout-swig"><a href="#修改文件-layout-swig" class="headerlink" title="修改文件_layout.swig"></a>修改文件_layout.swig</h2><p>在路径：<code>blog/themes/next/layout</code>下找到_layout.swig文件，然后将下面的代码添加到：<code>&lt;body itemscope ...&gt;</code>在body里面就可以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/dist/APlayer.min.css"</span>&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"aplayer"</span>&gt;&lt;/div&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/APlayer.min.js"</span>&gt;&lt;/script&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/music.js"</span>&gt;&lt;/script&gt;</span></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>然后<code>hexo g</code>再<code>hexo d</code>在网页的左下角就可以看到了，大功告成！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Bitcoin中提取部分签名字段R（1）</title>
      <link href="/2020/01/22/%E4%BB%8EBitcoin%E4%B8%AD%E6%8F%90%E5%8F%96%E9%83%A8%E5%88%86%E7%AD%BE%E5%90%8D%E5%AD%97%E6%AE%B5R1/"/>
      <url>/2020/01/22/%E4%BB%8EBitcoin%E4%B8%AD%E6%8F%90%E5%8F%96%E9%83%A8%E5%88%86%E7%AD%BE%E5%90%8D%E5%AD%97%E6%AE%B5R1/</url>
      
        <content type="html"><![CDATA[<h2 id="有关Bitcoin中部分签名的提取"><a href="#有关Bitcoin中部分签名的提取" class="headerlink" title="有关Bitcoin中部分签名的提取"></a>有关Bitcoin中部分签名的提取</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&ensp;&ensp;&ensp;&ensp;刚刚接触Bitcoin Wallet 里面的构造还不是很清楚，提取和解析指令也不是很熟悉，所以听到这个题目，有些无从下手，于是我先熟悉了bitcoin-cli的指令，例如：getblockhash + 区块高度、getblock + blockhash、getrawtransaction + Tx、decoderawtransaction + (getrawtransaction所获得的字符串)，想要获得签名r主要是通过这些指令，之后我学习了解析交易字符串后的各部分所代表的含义，通过学习精通比特币，我了解到在交易过程中，存在解锁脚本和锁定脚本，结合解析出的信息，我发现里面存在scriptSig这个字段名，但是里面存在两个字段：asm和hex，深入了解后发现，hex代表的是签名脚本的16进制字符串，至此我找到了目标提取字符串。下面具体介绍提取过程。</p><a id="more"></a><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>&ensp;&ensp;&ensp;&ensp;提取出比特币钱包所有签名字段中的r，并找到相同的签名r。</p><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><h5 id="UTXO"><a href="#UTXO" class="headerlink" title="UTXO"></a>UTXO</h5><p>&ensp;&ensp;&ensp;&ensp;比特币交易的基本单位是未经使用的一个交易输出UTXO。它是不可再分割的，在比它的金额还小的交易中就会存在找零行为，即会产生多个输出。实际上，并不存在存储比特币账户金额的地点，只有被所有者锁住的、分散在比特币网络中的UTXO。</p><h5 id="锁定脚本"><a href="#锁定脚本" class="headerlink" title="锁定脚本"></a>锁定脚本</h5><p>&ensp;&ensp;&ensp;&ensp;放在交易输出上的一个障碍，给出了花费UTXO的条件，一般包含条件操作符和限定公钥。</p><h5 id="解锁脚本"><a href="#解锁脚本" class="headerlink" title="解锁脚本"></a>解锁脚本</h5><p>&ensp;&ensp;&ensp;&ensp;是一个满足是锁定脚本限定条件的脚本，从而允许锁定的UTXO被花费，它也是交易输出的一部分，一般包含数字签名和对应公钥。</p><h6 id="比特币交易的具体过程"><a href="#比特币交易的具体过程" class="headerlink" title="比特币交易的具体过程"></a>比特币交易的具体过程</h6><p><img src="https://img-blog.csdnimg.cn/20200117231437525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0MDU3,size_16,color_FFFFFF,t_70" alt="Transaction"><br>&ensp;&ensp;&ensp;&ensp;当userB给userC发送btc时，会新产生UTXO，观察图中的橙色连线，我们发现，新产生的UTXO中的in中scriptSig的公钥与之前的UTXO中scriptPubKey的公钥相同，其实在交易的过程中，解锁脚本需要满足未花费UTXO锁定脚本的条件，通过脚本语言验证，也就是之前交易的输出，证明是其拥有者，即可将其中的比特币调出，生成新的交易输出。所以交易过程中签名就存放在解锁脚本里面，后面通过解析交易字符串，我们就可以明确的找到scriptSig的所在了。</p><h5 id="ECDSA"><a href="#ECDSA" class="headerlink" title="ECDSA"></a>ECDSA</h5><p>&ensp;&ensp;&ensp;&ensp;在比特币系统中，所采用的是椭圆曲线数字签名算法来对交易进行签名。签名会产生两部分：r、s</p><h5 id="解析交易字符串及部分字段的含义"><a href="#解析交易字符串及部分字段的含义" class="headerlink" title="解析交易字符串及部分字段的含义"></a>解析交易字符串及部分字段的含义</h5><p><img src="https://img-blog.csdnimg.cn/20200117231828793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0MDU3,size_16,color_FFFFFF,t_70" alt="scriptSig"><br>vin：交易输入数组<br>&ensp;&ensp;txid：交易ID<br>&ensp;&ensp;vout：交易输出序号<br>&ensp;&ensp;&ensp;&ensp;scriptSig：签名脚本<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;asm：签名脚本的汇编码<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;hex：签名脚本的16进制字符串表示<br>&ensp;&ensp;sequence：输入序列号<br>发现scriptSig中存在两个字段asm和hex，签名r到底在哪个字段里面呢？</p><h5 id="Transaction字符串的详解含义图"><a href="#Transaction字符串的详解含义图" class="headerlink" title="Transaction字符串的详解含义图"></a>Transaction字符串的详解含义图</h5><p><img src="https://img-blog.csdnimg.cn/20200117232116798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0MDU3,size_16,color_FFFFFF,t_70" alt="TransactionAll"><br><strong>ScriptSig</strong><br><img src="https://img-blog.csdnimg.cn/20200117232230699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0MDU3,size_16,color_FFFFFF,t_70" alt="ScriptSig"><br>&ensp;&ensp;&ensp;&ensp;Lr的含义是签名r的长度，且每个小长方形代表两个字符，所以我们可以通过计算得到签名r的长度，从而可从字符串中截取出来。<br><strong>举个实例看一下：</strong><br>hex<br>4830450221<strong>00d71db39ae4f6bc3128d78661f6951bb17b097ab32e1ead3ce6fe761914715dd5</strong>02201970b34d36a9fef053b8b7a3c4555ef5bba14a88992449b980aee862465d966e01410404ac8c30c4e85f47702bfa8d8d56d8e614258958d6655611474da6cadb8c73195dc7951db3466caabd256ebc9f6ef87fcdb597b6cb048dd1bbf011713690ba19<br>其中黑体部分就是签名字段中的R<br>&ensp;&ensp;&ensp;&ensp;<strong>Lr=οχ21⟹32byte⇒32×8=256bit⇒256÷4=64</strong><br>&ensp;&ensp;&ensp;&ensp;所以可以得出签名r的长度是64，即在21之后的64个字符为签名r<br>至此，我们找到了需要提取的内容，我们可以通过编写脚本语言将其导出，但是截止2020年1月10日，整个比特币钱包的大小为300G，所拥有的的区块数目是612345，数据量较大，不容易导出。</p><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><p>&ensp;&ensp;&ensp;&ensp;主要任务就是将数据导出，刚开始没有一点思路，慢慢地发现可以通过编写python代码，将数据导入到指定文件中去，一开始我是直接在服务器上写代码，将hex导出到文件中去，但是不知道如何将文件放到本地，并且通过指令操作文件、运行代码比较麻烦，就找到了另外一种方法，pycharm可以连接到服务器，可以对服务器上代码以及文件直接操作即可，但是比特币网络中的数据量太大，想要导出签名所需要耗费的时间太多，目前我只导出了前610000个区块的tx，后续导出签名的代码出现问题，还在修改中，希望能尽快导出所有的签名R。</p>]]></content>
      
      
      <categories>
          
          <category> Bitcoin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bitcoin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bitcoin 区块结构解析</title>
      <link href="/2020/01/22/bitcoin%E5%8C%BA%E5%9D%97%E7%BB%93%E6%9E%84/"/>
      <url>/2020/01/22/bitcoin%E5%8C%BA%E5%9D%97%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="区块的结构"><a href="#区块的结构" class="headerlink" title="区块的结构"></a>区块的结构</h2><p>区块分为：区块头和区块体</p><a id="more"></a><h4 id="区块头"><a href="#区块头" class="headerlink" title="区块头"></a>区块头</h4><p>区块头包括三组元数据：</p><ul><li>用于连接前面的区块、索引自父区块哈希值的数据。</li><li>挖矿难度、Nonce（随机数，用于工作量证明算法的随机数）、时间戳（当前区块的生成时间）</li><li>能够总结并快速归纳校验区块中所有交易数据的Merkle树根</li></ul><h4 id="区块体"><a href="#区块体" class="headerlink" title="区块体"></a>区块体</h4><p>主要包含交易数据tx</p><h4 id="区块结构图："><a href="#区块结构图：" class="headerlink" title="区块结构图："></a>区块结构图：</h4><p><img src="https://img-blog.csdnimg.cn/20200122235043793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzI0MDU3,size_16,color_FFFFFF,t_70" alt="block"></p><h4 id="交易结构图："><a href="#交易结构图：" class="headerlink" title="交易结构图："></a>交易结构图：</h4><p><img src="/images/transaction.png" alt="transaction"></p><h4 id="区块的第一笔交易：coinbase交易结构"><a href="#区块的第一笔交易：coinbase交易结构" class="headerlink" title="区块的第一笔交易：coinbase交易结构"></a>区块的第一笔交易：coinbase交易结构</h4><p><img src="/images/coinbase.png" alt="coinbase"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>2020.1.16——2020.1.23<br>这段时间主要完成了Bitcoin结构的分析及作图、和对前面提取签名工作的总结，目前代码编写出现问题，需要花时间去找到方法解决，之后会继续更新其他具有隐私保护能力的密码货币的区块结构图。</p>]]></content>
      
      
      <categories>
          
          <category> 区块结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bitcoin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/01/hello-world/"/>
      <url>/2019/12/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
